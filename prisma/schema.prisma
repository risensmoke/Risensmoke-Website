generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String
  lastName      String
  phone         String?
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  orders        Order[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MenuItem {
  id              String   @id @default(cuid())
  cloverItemId    String?  @unique
  name            String
  description     String
  basePrice       Float
  category        String
  image           String?
  available       Boolean  @default(true)
  prepTime        Int      @default(15)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  modifierGroups  ModifierGroup[]
  orderItems      OrderItem[]
}

model ModifierGroup {
  id              String   @id @default(cuid())
  menuItemId      String
  cloverGroupId   String?
  name            String
  required        Boolean  @default(false)
  minSelections   Int      @default(0)
  maxSelections   Int?

  menuItem        MenuItem @relation(fields: [menuItemId], references: [id])
  modifiers       Modifier[]
}

model Modifier {
  id              String   @id @default(cuid())
  modifierGroupId String
  cloverModId     String?
  name            String
  price           Float    @default(0)

  modifierGroup   ModifierGroup @relation(fields: [modifierGroupId], references: [id])
  orderItemMods   OrderItemModifier[]
}

model Order {
  id                  String   @id @default(cuid())
  orderNumber         String   @unique
  cloverOrderId       String?
  userId              String?
  customerEmail       String
  customerPhone       String
  customerFirstName   String
  customerLastName    String
  subtotal            Float
  tax                 Float
  total               Float
  pickupTime          DateTime
  estimatedReady      DateTime
  status              OrderStatus @default(CONFIRMED)
  paymentIntentId     String?
  specialInstructions String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user                User?      @relation(fields: [userId], references: [id])
  items               OrderItem[]
}

model OrderItem {
  id                  String   @id @default(cuid())
  orderId             String
  menuItemId          String
  quantity            Int
  basePrice           Float
  totalPrice          Float
  specialInstructions String?

  order               Order    @relation(fields: [orderId], references: [id])
  menuItem            MenuItem @relation(fields: [menuItemId], references: [id])
  modifiers           OrderItemModifier[]
}

model OrderItemModifier {
  id           String @id @default(cuid())
  orderItemId  String
  modifierId   String
  price        Float

  orderItem    OrderItem @relation(fields: [orderItemId], references: [id])
  modifier     Modifier  @relation(fields: [modifierId], references: [id])
}

enum OrderStatus {
  CONFIRMED
  PREPARING
  READY
  PICKED_UP
  CANCELLED
}